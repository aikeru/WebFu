<script type="text/javascript" language="javascript">
//WFUtilitiesJquery.js
// This script uses jQuery for validation instead of Microsoft's AJAX libraries.
// If jQuery is being used it will reduce the JS footprint.

// WFUtilities
function WFSubmitForm(methodName) {
    var elem = $('#JSMethod');
    var elemStr = '<input type="hidden" name="JSMethod" id="JSMethod" value="' + methodName + '" />';
    if (elem[0] === undefined) {
        elem = $("form").append(elemStr);
    } else {
        elem = $('#JSMethod').replaceWith(elemStr);
    }
    (document.forms[0]).submit();
    return false;
}

function WFEnableUpload() {
    $('form').attr("enctype", "multipart/form-data");
    $('form').attr("encoding", "multipart/form-data");
}

//Syntax is like this:
//  PageName.aspx/MethodName
//This works against AJAX in 3.5 but not 2.0 (2.0 has no .d property)
function WFCallPage(pageMethodURL, args) {
    if (args.data === undefined || args.data === null || args.data === "") { args.data = "{}"; }
    $.ajax({ type: "POST", url: pageMethodURL, data: args.data, contentType: "application/json; charset=utf-8",
        dataType: "json",
        success: function(a, b, c) {
            if (args.success != undefined && args.success != null) {
                args.success(a, b, c);
            }
        },
        error: function(a, b, c) {
            if (args.error != undefined && args.error != null) {
                args.error(a, b, c);
            }
        }
    });
}

//Uses jQuery's .serialize() method and excludes ASP.net's extra hidden fields
//Returns what looks like a raw post body that is URL encoded (ie: name=value&name2=value2...) and has double-quotes escaped " -> \"
function WFSerializeForm() {
    var serStr = $('form :input').not('#__VIEWSTATE,#__EVENTVALIDATION').serialize();
    serStr = serStr.replace(/"/g, "\\\"");
    return serStr;
}
// register custom jQuery methods
if (jQuery.validator) { //Only if validator plugin is loaded
    jQuery.validator.addMethod("regex", function(value, element, params) {
        if (this.optional(element)) {
            return true;
        }

        var match = new RegExp(params).exec(value);
        return (match && (match.index == 0) && (match[0].length == value.length));
    });
}

//Most of these methods are "ripped-off" from Microsoft's MVC validation JavaScript and changed slightly.
function __WFU_ApplyValidator_Range(object, min, max) {
    object["range"] = [min, max];
}
function __WFU_ApplyValidator_RegularExpression(object, pattern) {
    object["regex"] = pattern;
}
function __WFU_ApplyValidator_Required(object) {
    object["required"] = true;
}
function __WFU_ApplyValidator_StringLength(object, maxLength) {
    object["maxlength"] = maxLength;
}
function __WFU_ApplyValidator_Unknown(object, validationType, validationParameters) {
    object[validationType] = validationParameters;
}
function __WFU_CreateFieldToValidationMessageMapping(validationFields) {
    var mapping = {};

    for (var i = 0; i < validationFields.length; i++) {
        var thisField = validationFields[i];
        mapping[thisField.FieldName] = "#" + thisField.ValidationMessageId;
    }

    return mapping;
}
function __WFU_CreateErrorMessagesObject(validationFields) {
    var messagesObj = {};

    for (var i = 0; i < validationFields.length; i++) {
        var thisField = validationFields[i];
        var thisFieldMessages = {};
        messagesObj[thisField.FieldName] = thisFieldMessages;
        var validationRules = thisField.ValidationRules;

        for (var j = 0; j < validationRules.length; j++) {
            var thisRule = validationRules[j];
            if (thisRule.ErrorMessage) {
                var jQueryValidationType = thisRule.ValidationType;
                switch (thisRule.ValidationType) {
                    case "regularExpression":
                        jQueryValidationType = "regex";
                        break;

                    case "stringLength":
                        jQueryValidationType = "maxlength";
                        break;
                }

                thisFieldMessages[jQueryValidationType] = thisRule.ErrorMessage;
            }
        }
    }

    return messagesObj;
}
function __WFU_CreateRulesForField(validationField) {
    var validationRules = validationField.ValidationRules;

    // hook each rule into jquery
    var rulesObj = {};
    for (var i = 0; i < validationRules.length; i++) {
        var thisRule = validationRules[i];
        switch (thisRule.ValidationType) {
            case "range":
                __WFU_ApplyValidator_Range(rulesObj,
                    thisRule.ValidationParameters["minimum"], thisRule.ValidationParameters["maximum"]);
                break;

            case "regularExpression":
                __WFU_ApplyValidator_RegularExpression(rulesObj,
                    thisRule.ValidationParameters["pattern"]);
                break;

            case "required":
                __WFU_ApplyValidator_Required(rulesObj);
                break;

            case "stringLength":
                __WFU_ApplyValidator_StringLength(rulesObj,
                    thisRule.ValidationParameters["maximumLength"]);
                break;

            default:
                __WFU_ApplyValidator_Unknown(rulesObj,
                    thisRule.ValidationType, thisRule.ValidationParameters);
                break;
        }
    }

    return rulesObj;
}
function __WFU_CreateValidationOptions(validationFields) {
    var rulesObj = {};
    for (var i = 0; i < validationFields.length; i++) {
        var validationField = validationFields[i];
        var fieldName = validationField.FieldName;
        rulesObj[fieldName] = __WFU_CreateRulesForField(validationField);
    }

    return rulesObj;
}
function __WFU_EnableClientValidation(validationContext) {
    // this represents the form containing elements to be validated
    var theForm = $("#" + validationContext.FormId);

    var fields = validationContext.Fields;
    var rulesObj = __WFU_CreateValidationOptions(fields);
    var fieldToMessageMappings = __WFU_CreateFieldToValidationMessageMapping(fields);
    var errorMessagesObj = __WFU_CreateErrorMessagesObject(fields);

    var options = {
        errorClass: "input-validation-error",
        errorElement: "span",
        errorPlacement: function(error, element) {
            var messageSpan = fieldToMessageMappings[element.attr("name")];
            $(messageSpan).empty();
            $(messageSpan).removeClass("field-validation-valid");
            $(messageSpan).addClass("field-validation-error");
            error.removeClass("input-validation-error");
            error.attr("_for_validation_message", messageSpan);
            error.appendTo(messageSpan);
        },
        messages: errorMessagesObj,
        rules: rulesObj,
        success: function(label) {
            var messageSpan = $(label.attr("_for_validation_message"));
            $(messageSpan).empty();
            $(messageSpan).addClass("field-validation-valid");
            $(messageSpan).removeClass("field-validation-error");
        }
    };

    // register callbacks with our AJAX system
    var formElement = document.getElementById(validationContext.FormId);
    var registeredValidatorCallbacks = formElement.validationCallbacks;
    if (!registeredValidatorCallbacks) {
        registeredValidatorCallbacks = [];
        formElement.validationCallbacks = registeredValidatorCallbacks;
    }
    registeredValidatorCallbacks.push(function() {
        theForm.validate();
        return theForm.valid();
    });

    theForm.validate(options);
}
// need to wait for the document to signal that it is ready
$(document).ready(function() {
    if (jQuery.validator) { //Only if validator plugin is loaded
        var allFormOptions = window.wfuClientValidationMetadata;
        if (allFormOptions) {
            while (allFormOptions.length > 0) {
                var thisFormOptions = allFormOptions.pop();
                __WFU_EnableClientValidation(thisFormOptions);
            }
        }
    }
});
</script>